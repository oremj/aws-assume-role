#!/bin/bash

CRED_FILE=~/.aws/credentials.gpg
MFA_DEVICE_FILE=~/.aws/mfadevice
MFA_DEVICE=$(cat "${MFA_DEVICE_FILE}")

AWS_ASSUME_ROLE_SESSION_TIMEOUT=${AWS_ASSUME_ROLE_SESSION_TIMEOUT:-7200}
AWS_ASSUME_ROLE_DEFAULT_REGION=${AWS_ASSUME_ROLE_DEFAULT_REGION:-us-west-2}

_aws-assume-role-account-alias() {
    aws iam list-account-aliases --output text --query "AccountAliases[0]"
}

_aws-assume-role-reset-env() {
    unset AWS_ACCESS_KEY_ID
    unset AWS_SECRET_ACCESS_KEY
    unset AWS_SESSION_TOKEN
    unset AWS_SECURITY_TOKEN
}

_aws-assume-role-activate-base-creds() {
    _aws-assume-role-reset-env

    eval "$(gpg -d "$CRED_FILE")"
}

_aws-assume-role-reuse-session() {
    export AWS_ACCESS_KEY_ID=$AWS_SESSION_ACCESS_KEY_ID
    export AWS_SECRET_ACCESS_KEY=$AWS_SESSION_SECRET_ACCESS_KEY
    export AWS_SECURITY_TOKEN=$AWS_SESSION_SESSION_TOKEN
    export AWS_SESSION_TOKEN=$AWS_SESSION_SESSION_TOKEN
}

_aws-assume-role-activate-session() {
    local access_key secret_key session_token mfa_token

    if ! _aws-assume-role-activate-base-creds; then
        echo "Could not activate base credentials"
        return 1
    fi

    echo -n "MFA Token: "
    read mfa_token


    read access_key secret_key session_token < <(
        aws sts get-session-token \
        --duration-seconds $AWS_ASSUME_ROLE_SESSION_TIMEOUT \
        --serial-number "${MFA_DEVICE}" \
        --token-code "${mfa_token}" \
        --output text --query "Credentials.[AccessKeyId,SecretAccessKey,SessionToken]")

    if [[ $? -ne 0 || -z $access_key || -z $secret_key || -z $session_token ]]; then
        echo "aws get-session-token failed"
        return 1
    fi

    AWS_SESSION_START=$(date +%s)
    AWS_SESSION_ACCESS_KEY_ID=$access_key
    AWS_SESSION_SECRET_ACCESS_KEY=$secret_key
    AWS_SESSION_SESSION_TOKEN=$session_token

    export AWS_ACCESS_KEY_ID=$access_key
    export AWS_SECRET_ACCESS_KEY=$secret_key
    export AWS_SECURITY_TOKEN=$session_token
    export AWS_SESSION_TOKEN=$session_token
}

aws-assume-role() {
    local accountname=$1
    local role=$2

    local accountid region

    if [[ -z "$role" ]]; then
        echo "usage: aws-assume-role <accountid> <role>"
        return 1
    fi

    accountid=$(jq -r ".[\"${accountname}\"].id" < ~/.aws/accounts)
    if [[ ! $accountid =~ ^[0-9]{12}$ ]]; then
        echo "Could not find account id in ~/.aws/accounts"
        return 1
    fi


    unset AWS_ACCOUNT_NAME
    unset AWS_ACCOUNT_ROLE
    unset AWS_DEFAULT_REGION
    unset AWS_REGION

    _aws-assume-role-reuse-session

    if ! aws sts get-caller-identity &> /dev/null; then
        if ! _aws-assume-role-activate-session; then
            echo "Could not activate session"
            return 1
        fi
    fi

    read access_key secret_key session_token < <(
        aws sts assume-role --role-arn "arn:aws:iam::${accountid}:role/${role}" \
        --role-session-name "${USER}-$(date +%s)" \
        --output text --query "Credentials.[AccessKeyId,SecretAccessKey,SessionToken]")

    if [[ $? -ne 0 || -z $access_key || -z $secret_key || -z $session_token ]]; then
        echo "aws sts assume-role failed"
        return 1
    fi


    export AWS_ACCESS_KEY_ID=$access_key
    export AWS_SECRET_ACCESS_KEY=$secret_key
    export AWS_SECURITY_TOKEN=$session_token
    export AWS_SESSION_TOKEN=$session_token

    local sts_account_id=$(aws sts get-caller-identity --output text --query Account)
    if [[ $accountid != $sts_account_id ]]; then
        echo "Something is wrong aws sts get-caller-identity does not match accountid"
        echo "Account ID: '${accountid}'"
        echo "STS Account ID: '${sts_account_id}'"
        _aws-assume-role-reset-env
        return 1
    fi

    AWS_ACCOUNT_NAME=$(_aws-assume-role-account-alias)
    AWS_ACCOUNT_ROLE=$role

    region=$(jq -r ".[\"${accountname}\"].region" < ~/.aws/accounts)
    if [[ -n $region ]] && [[ $region != "null" ]]; then
        export AWS_DEFAULT_REGION=$region
    else
        export AWS_DEFAULT_REGION=$AWS_ASSUME_ROLE_DEFAULT_REGION
        echo "No default region"
    fi
    export AWS_REGION=$AWS_DEFAULT_REGION
    echo "Setting region to: $AWS_DEFAULT_REGION"
}

_aws-assume-role() {
    if (( CURRENT == 2 )); then
        _values "accounts" $(jq -r 'keys[]' < ~/.aws/accounts)
        return
    fi
    local account=${words[2]}
    if (( CURRENT == 3 )); then
        local roles=$(jq -r ".[\"${account}\"].roles[]" < ~/.aws/accounts 2>/dev/null)
        if [[ -z $roles ]] || [[ "$roles" == "null" ]]; then
            roles="aws_admin_role"
        fi
        _values "roles" $roles
        return
    fi
}

_aws-assume-role-bash() {
    local accounts
    local cur=$2
    if [ ${COMP_CWORD} -eq 1 ]; then
        accounts=$(jq -r 'keys[]' < ~/.aws/accounts)
        COMPREPLY=( $(compgen -W "$accounts" -- ${cur}) )
        return
    fi
    if [ ${COMP_CWORD} -eq 2 ]; then
        local account
        account=${COMP_WORDS[1]}
        local roles=$(jq -r ".[\"${account}\"].roles[]" < ~/.aws/accounts 2>/dev/null)
        if [[ -z $roles ]] || [[ "$roles" == "null" ]]; then
            roles="aws_admin_role"
        fi
        COMPREPLY=( $(compgen -W "$roles" -- ${cur}) )
        return
    fi
}

# AWS ACCOUNT NAME
function prompt-aws-account-info {
    local region
    if [[ ! -z $AWS_DEFAULT_REGION ]]; then
        region="/${AWS_DEFAULT_REGION}"
    fi
    [ "$AWS_ACCOUNT_NAME" ] && [ "$AWS_ACCOUNT_ROLE" ] && echo "%{$fg[blue]%}aws:(%{$fg[red]%}${AWS_ACCOUNT_NAME}${region}%{$fg[blue]%})%{$reset_color%} "
}

if [[ -n "$ZSH_NAME" ]]; then
    PROMPT="$PROMPT\$(prompt-aws-account-info)"
    compdef _aws-assume-role aws-assume-role
elif [[ -n "$BASH" ]]; then
    complete -F _aws-assume-role-bash aws-assume-role
fi
